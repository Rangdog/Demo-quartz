package com.example.quartz_demo_duplicate.config;

import com.example.quartz_demo_duplicate.job.SimpleJob;
import jakarta.annotation.PostConstruct;
import org.quartz.*;
import org.quartz.impl.calendar.HolidayCalendar;
import org.quartz.impl.matchers.GroupMatcher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Set;

@Component
public class JobScheduler {

    private final Scheduler scheduler;

    @Autowired
    public JobScheduler(Scheduler scheduler) {
        this.scheduler = scheduler;
    }

    @PostConstruct
    public void init() throws Exception {
        System.out.println("‚ö†Ô∏è B·∫Øt ƒë·∫ßu x√≥a t·∫•t c·∫£ job v√† trigger...");

        // X√≥a t·∫•t c·∫£ job hi·ªán c√≥
        for (String groupName : scheduler.getJobGroupNames()) {
            Set<JobKey> jobKeys = scheduler.getJobKeys(GroupMatcher.jobGroupEquals(groupName));
            for (JobKey jobKey : jobKeys) {
                scheduler.deleteJob(jobKey);
                System.out.println("üóëÔ∏è ƒê√£ x√≥a job: " + jobKey);
            }
        }

        String calendarName = "holidayCalendar";
        if (scheduler.getCalendarNames().contains(calendarName)) {
            boolean deleted = scheduler.deleteCalendar(calendarName);
            if (deleted) {
                System.out.println("üóëÔ∏è ƒê√£ x√≥a calendar: " + calendarName);
            } else {
                System.out.println("‚ùå Kh√¥ng th·ªÉ x√≥a calendar: " + calendarName);
            }
        } else {
            System.out.println("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y calendar ƒë·ªÉ x√≥a.");
        }

        // ‚úÖ L·∫•y ng√†y h√¥m nay (ch·ªâ l·∫•y ph·∫ßn ng√†y, kh√¥ng c√≥ gi·ªù ph√∫t)
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DAY_OF_YEAR, 1);
        tomorrow.set(Calendar.HOUR_OF_DAY, 0);
        tomorrow.set(Calendar.MINUTE, 0);
        tomorrow.set(Calendar.SECOND, 0);
        tomorrow.set(Calendar.MILLISECOND, 0);
        Date startAt = tomorrow.getTime();

        // ‚úÖ T·∫°o v√† th√™m HolidayCalendar v·ªõi ng√†y h√¥m nay
        if (!scheduler.getCalendarNames().contains(calendarName)) {
            HolidayCalendar holidays = new HolidayCalendar();
            holidays.addExcludedDate(todayDate);  // lo·∫°i tr·ª´ h√¥m nay

            scheduler.addCalendar(calendarName, holidays, false, false);
            System.out.println("üìÖ ƒê√£ th√™m holidayCalendar lo·∫°i tr·ª´: " + todayDate);
        } else {
            System.out.println("‚ö†Ô∏è holidayCalendar ƒë√£ t·ªìn t·∫°i, b·ªè qua.");
        }

        // üéØ ƒêƒÉng k√Ω Job s·ª≠ d·ª•ng Calendar (trigger s·∫Ω KH√îNG ch·∫°y n·∫øu h√¥m nay b·ªã lo·∫°i)
        JobDetail jobDetail = JobBuilder.newJob(SimpleJob.class)
                .withIdentity("immediateJob", "calendarGroup")
                .build();

        Trigger trigger = TriggerBuilder.newTrigger()
                .withIdentity("immediateTrigger", "calendarGroup")
                .startNow()  // ch·∫°y ngay
                .modifiedByCalendar(calendarName)
                .withSchedule(SimpleScheduleBuilder.simpleSchedule()
                        .withRepeatCount(0)) // ch·ªâ ch·∫°y 1 l·∫ßn duy nh·∫•t
                .build();

        scheduler.scheduleJob(jobDetail, trigger);
        System.out.println("‚úÖ ƒêƒÉng k√Ω job v·ªõi calendar xong. N·∫øu job KH√îNG ch·∫°y, ch·ª©ng t·ªè h√¥m nay b·ªã ch·∫∑n.");
    }
}
